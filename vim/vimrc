" settings
set number                      " Display line numbers beside buffer
set nocompatible                " Don't maintain compatibility with Vi.
set hidden                      " Allow buffer change w/o saving
set lazyredraw                  " Don't update while executing macros
set backspace=indent,eol,start  " Sane backspace behavior
set history=1000                " Remember last 1000 commands
set scrolloff=4                 " Keep at least 4 lines below cursor

" indentation
set expandtab
set shiftwidth=2
set softtabstop=2

" spellcheck settings
set spell spelllang=en_us       " Spellcheck us English
syntax spell toplevel           " Spellcheck syntax as well
" zg to add word to word list
" zw to reverse
" zug to remove word from word list
" z= to get list of possibilities
set spellfile=~/.vim/spellfile.add
set complete+=kspell
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

" Make CtrlP use ag for listing the files. Way faster and no useless files.
" dnf install the_silver_searcher
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0

"" syntastic settings
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"
"let g:syntastic_eruby_ruby_quiet_messages = {'regex': 'possibly useless use of a variable in void context'}
"let g:syntastic_ruby_checkers = ['mri', 'rubocop', 'eruby']
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" start Tmux settings
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" RSpec.vim && vim tmux runner
let g:rspec_command = "call VtrSendCommand('docker-compose run app rspec {spec}')"

" format elixir code on save
let g:mix_format_on_save = 1
let g:ale_elixir_credo_strict = 1

" Prettier format before saving
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync


" VIM TMUX runner
map <leader>va :VtrAttachToPane<cr>
map <leader>ror :VtrReorientRunner<cr>
map <leader>sc :VtrSendCommandToRunner<cr>
map <leader>sl :VtrSendLinesToRunner<cr>
map <leader>or :VtrOpenRunner<cr>
map <leader>kr :VtrKillRunner<cr>
map <leader>fr :VtrFocusRunner<cr>
map <leader>dr :VtrDetachRunner<cr>
map <leader>cr :VtrClearRunner<cr>
map <leader>fc :VtrFlushCommand<cr>
map <leader>sf :VtrSendFile<cr>

" show line limit
set textwidth=100
set colorcolumn=+1
hi ColorColumn guibg=#2d2d2d ctermbg=246

" ctags config
set tags=./tags;

" plugins
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'w0rp/ale'
" Plug 'scrooloose/syntastic'
Plug 'ntpeters/vim-better-whitespace'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'thoughtbot/vim-rspec'
Plug 'christoomey/vim-tmux-runner'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'sjl/badwolf'
Plug 'pangloss/vim-javascript'
Plug 'mhinz/vim-mix-format'
Plug 'elixir-editors/vim-elixir'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
" Add plugins to &runtimepath
call plug#end()

" color scheme
colorscheme badwolf
